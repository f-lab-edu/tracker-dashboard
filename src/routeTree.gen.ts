/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as EnrollImport } from './routes/enroll'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as AuthenticatedIndexImport } from './routes/_authenticated/index'
import { Route as AuthenticatedSubStatImport } from './routes/_authenticated/subStat'
import { Route as AuthenticatedMyPageImport } from './routes/_authenticated/myPage'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const EnrollRoute = EnrollImport.update({
  id: '/enroll',
  path: '/enroll',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedIndexRoute = AuthenticatedIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedSubStatRoute = AuthenticatedSubStatImport.update({
  id: '/subStat',
  path: '/subStat',
  getParentRoute: () => AuthenticatedRoute,
} as any)

const AuthenticatedMyPageRoute = AuthenticatedMyPageImport.update({
  id: '/myPage',
  path: '/myPage',
  getParentRoute: () => AuthenticatedRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/enroll': {
      id: '/enroll'
      path: '/enroll'
      fullPath: '/enroll'
      preLoaderRoute: typeof EnrollImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated/myPage': {
      id: '/_authenticated/myPage'
      path: '/myPage'
      fullPath: '/myPage'
      preLoaderRoute: typeof AuthenticatedMyPageImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/subStat': {
      id: '/_authenticated/subStat'
      path: '/subStat'
      fullPath: '/subStat'
      preLoaderRoute: typeof AuthenticatedSubStatImport
      parentRoute: typeof AuthenticatedImport
    }
    '/_authenticated/': {
      id: '/_authenticated/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthenticatedIndexImport
      parentRoute: typeof AuthenticatedImport
    }
  }
}

// Create and export the route tree

interface AuthenticatedRouteChildren {
  AuthenticatedMyPageRoute: typeof AuthenticatedMyPageRoute
  AuthenticatedSubStatRoute: typeof AuthenticatedSubStatRoute
  AuthenticatedIndexRoute: typeof AuthenticatedIndexRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedMyPageRoute: AuthenticatedMyPageRoute,
  AuthenticatedSubStatRoute: AuthenticatedSubStatRoute,
  AuthenticatedIndexRoute: AuthenticatedIndexRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof AuthenticatedRouteWithChildren
  '/enroll': typeof EnrollRoute
  '/login': typeof LoginRoute
  '/myPage': typeof AuthenticatedMyPageRoute
  '/subStat': typeof AuthenticatedSubStatRoute
  '/': typeof AuthenticatedIndexRoute
}

export interface FileRoutesByTo {
  '/enroll': typeof EnrollRoute
  '/login': typeof LoginRoute
  '/myPage': typeof AuthenticatedMyPageRoute
  '/subStat': typeof AuthenticatedSubStatRoute
  '/': typeof AuthenticatedIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/enroll': typeof EnrollRoute
  '/login': typeof LoginRoute
  '/_authenticated/myPage': typeof AuthenticatedMyPageRoute
  '/_authenticated/subStat': typeof AuthenticatedSubStatRoute
  '/_authenticated/': typeof AuthenticatedIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/enroll' | '/login' | '/myPage' | '/subStat' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/enroll' | '/login' | '/myPage' | '/subStat' | '/'
  id:
    | '__root__'
    | '/_authenticated'
    | '/enroll'
    | '/login'
    | '/_authenticated/myPage'
    | '/_authenticated/subStat'
    | '/_authenticated/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  EnrollRoute: typeof EnrollRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  EnrollRoute: EnrollRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_authenticated",
        "/enroll",
        "/login"
      ]
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx",
      "children": [
        "/_authenticated/myPage",
        "/_authenticated/subStat",
        "/_authenticated/"
      ]
    },
    "/enroll": {
      "filePath": "enroll.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_authenticated/myPage": {
      "filePath": "_authenticated/myPage.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/subStat": {
      "filePath": "_authenticated/subStat.tsx",
      "parent": "/_authenticated"
    },
    "/_authenticated/": {
      "filePath": "_authenticated/index.tsx",
      "parent": "/_authenticated"
    }
  }
}
ROUTE_MANIFEST_END */
