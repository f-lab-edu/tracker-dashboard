/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as AuthenticatedImport } from './routes/_authenticated'
import { Route as EnrollImport } from './routes/enroll'
import { Route as IndexImport } from './routes/index'
import { Route as LoginImport } from './routes/login'
import { Route as MainStatImport } from './routes/mainStat'
import { Route as MyPageImport } from './routes/myPage'
import { Route as SubStatImport } from './routes/subStat'

// Create/Update Routes

const SubStatRoute = SubStatImport.update({
  id: '/subStat',
  path: '/subStat',
  getParentRoute: () => rootRoute,
} as any)

const MyPageRoute = MyPageImport.update({
  id: '/myPage',
  path: '/myPage',
  getParentRoute: () => rootRoute,
} as any)

const MainStatRoute = MainStatImport.update({
  id: '/mainStat',
  path: '/mainStat',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const EnrollRoute = EnrollImport.update({
  id: '/enroll',
  path: '/enroll',
  getParentRoute: () => rootRoute,
} as any)

const AuthenticatedRoute = AuthenticatedImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedImport
      parentRoute: typeof rootRoute
    }
    '/enroll': {
      id: '/enroll'
      path: '/enroll'
      fullPath: '/enroll'
      preLoaderRoute: typeof EnrollImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/mainStat': {
      id: '/mainStat'
      path: '/mainStat'
      fullPath: '/mainStat'
      preLoaderRoute: typeof MainStatImport
      parentRoute: typeof rootRoute
    }
    '/myPage': {
      id: '/myPage'
      path: '/myPage'
      fullPath: '/myPage'
      preLoaderRoute: typeof MyPageImport
      parentRoute: typeof rootRoute
    }
    '/subStat': {
      id: '/subStat'
      path: '/subStat'
      fullPath: '/subStat'
      preLoaderRoute: typeof SubStatImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRoute
  '/enroll': typeof EnrollRoute
  '/login': typeof LoginRoute
  '/mainStat': typeof MainStatRoute
  '/myPage': typeof MyPageRoute
  '/subStat': typeof SubStatRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthenticatedRoute
  '/enroll': typeof EnrollRoute
  '/login': typeof LoginRoute
  '/mainStat': typeof MainStatRoute
  '/myPage': typeof MyPageRoute
  '/subStat': typeof SubStatRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRoute
  '/enroll': typeof EnrollRoute
  '/login': typeof LoginRoute
  '/mainStat': typeof MainStatRoute
  '/myPage': typeof MyPageRoute
  '/subStat': typeof SubStatRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/enroll'
    | '/login'
    | '/mainStat'
    | '/myPage'
    | '/subStat'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '' | '/enroll' | '/login' | '/mainStat' | '/myPage' | '/subStat'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/enroll'
    | '/login'
    | '/mainStat'
    | '/myPage'
    | '/subStat'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRoute
  EnrollRoute: typeof EnrollRoute
  LoginRoute: typeof LoginRoute
  MainStatRoute: typeof MainStatRoute
  MyPageRoute: typeof MyPageRoute
  SubStatRoute: typeof SubStatRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRoute,
  EnrollRoute: EnrollRoute,
  LoginRoute: LoginRoute,
  MainStatRoute: MainStatRoute,
  MyPageRoute: MyPageRoute,
  SubStatRoute: SubStatRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_authenticated",
        "/enroll",
        "/login",
        "/mainStat",
        "/myPage",
        "/subStat"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_authenticated": {
      "filePath": "_authenticated.tsx"
    },
    "/enroll": {
      "filePath": "enroll.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/mainStat": {
      "filePath": "mainStat.tsx"
    },
    "/myPage": {
      "filePath": "myPage.tsx"
    },
    "/subStat": {
      "filePath": "subStat.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
